{"version":3,"sources":["store/interfaces/authUser.ts","utils/helpers/checkValidateStatus.js","store/actions/authAction.ts","modules/TodoList/components/TodoCards/TodoCards.interface.ts","utils/helpers/authenticationUser.ts","components/WhiteShadowBlock/index.tsx","modules/LoginForm/components/LoginForm.tsx","hooks/useAuthActions.ts","modules/LoginForm/containers/LoginForm.ts","utils/validate/validate.ts","pages/LoginPage.tsx","modules/TodoList/components/TodoCardContent/TodoCardsContent.interface.ts","modules/TodoList/components/SelectStatus/index.tsx","modules/TodoList/components/SelectPerformer/index.tsx","utils/helpers/checkResultStatus.ts","components/ResultRequest/index.tsx","modules/TodoList/components/TodoCardContent/index.tsx","store/interfaces/performer.ts","modules/TodoList/components/TodoCard/index.tsx","modules/TodoList/components/CreateTodo/index.tsx","modules/TodoList/components/TodoCards/index.tsx","utils/helpers/filteringByTask.ts","utils/helpers/filteringByTodoState.ts","store/interfaces/todos.ts","http/index.ts","services/PerformerService.ts","store/actionCreates/performersAction.ts","utils/routs.ts","services/TodosService.ts","store/actionCreates/todosAction.ts","hooks/useTypedSelector.ts","store/actions/todoActions.ts","modules/TodoList/containers/TodoList.tsx","hooks/usePerformerActions.ts","hooks/useTdosActionsCreators.ts","hooks/useTdosActions.ts","utils/helpers/checkIsLoading.ts","pages/MainPage.tsx","hoc/RequireAuth.tsx","hoc/RequireHome.tsx","router/index.tsx","App.tsx","store/reducers/performersReducer.ts","store/reducers/todosReducer.ts","store/reducers/authReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["userTypes","firstCheckingValidateStatus","touched","errors","values","filteringValuesOfTodoState","authUser","userData","type","AUTHORIZATION_USER","payload","UserData","WhiteShadowBlock","children","classname","className","classNames","Content","Layout","LoginForm","isSubmitting","handleChange","handleBlur","isValid","useState","formIsDispatched","setFormIsDispatched","loginError","setLoginError","navigate","useNavigate","dispatch","useDispatch","bindActionCreators","AuthAction","useAuthActions","onChangeInput","event","name","initialValues","remember","onFinish","email","password","authenticationUser","replace","window","localStorage","isAuth","Item","hasFeedback","validateStatus","help","id","size","onBlur","onChange","prefix","MailOutlined","placeholder","Password","LockOutlined","valuePropName","noStyle","href","htmlType","onClick","loading","withFormik","validate","rules","value","test","Object","keys","forEach","key","validateForm","handleSubmit","setSubmitting","displayName","LoginPage","message","tabListKeys","Option","Select","SelectStatus","stateValue","todoId","changeStateTodo","undefined","todoStatus","setTodoStatus","handleStatus","a","style","width","margin","SelectPerformer","performer","performersList","changePerformerTodo","performerId","defaultValue","todoPerformer","setTodoPerformer","idOfNewPerformer","find","item","String","map","checkResultStatus","resultRequest","positiveResult","negativeResult","ResultRequest","status","title","subtitle","subTitle","Meta","Card","TodoCardContent","buttonIsSubmitting","setButtonIsSubmitting","activeTabKey","todo","performers","editTodo","taskTitle","setTaskTitle","task","setTask","setLoading","avatarPerformer","setAvatarPerformer","isDisabled","onRemakeTodo","returnAvatar","length","Number","avatar","useEffect","console","log","contentList","active","src","description","edit","labelCol","span","wrapperCol","autoComplete","label","required","target","offset","disabled","danger","PerformersTypes","tabList","tab","ProfileOutlined","fontSize","EditOutlined","TodoCard","deleteTodo","keyTask","setActiveTabKey","marginTop","onTabChange","toggleTab","actions","state","DeleteOutlined","inputStyleConfig","CreateTodo","createTodo","showForm","setShowForm","loadingAddTodo","setLoadingAddTodo","setResultRequest","closeForm","bordered","then","catch","error","finally","setTimeout","AppstoreAddOutlined","opacity","icon","CloudUploadOutlined","shape","UploadOutlined","TodoCards","todos","searchValue","setSearchValue","todosList","setTodosList","all","stateFilterValue","setStateFilterValue","SearchOutlined","inputValue","arrTodos","filter","toLowerCase","includes","filteringByTask","e","filterValue","filteringBySate","filterParam","waiting","atWork","done","dataSource","renderItem","TodoActionsType","$api","axios","create","baseURL","PerformerService","get","data","fetchPerformers","FETCH_PERFORMERS","fetchingPerformers","FETCH_PERFORMERS_SUCCESS","FETCH_PERFORMERS_ERROR","Routs","TodosService","Promise","resolve","reject","put","delete","post","fetchTodos","FETCH_TODOS","FETCH_TODOS_SUCCESS","FETCH_TODOS_ERROR","useTypedSelector","useSelector","setStateTodo","SET_TODO_STATE","setPerformerTodo","ASSIGN_TODO_PERFORMER","CREATE_TODO","SetTodoTask","SET_TODO_TASK","DeleteTodoTask","DELETE_TODO_TASK","Header","antIcon","LoadingOutlined","spin","TodoList","PerformerActionCreators","usePerformerActions","TodosActionCreators","useTodosActionsCreators","TodosAction","useTodosActions","performersLoading","performersError","todosLoading","todosError","isSuccess","reqError","newTodo","setTodo","response","arrOfOnceTodo","resultOfLoading","firstLoading","secondLoading","firstError","secondError","CheckIsLoading","backgroundColor","color","indicator","res","MainPage","unauthenticatedRout","path","LOGIN_ROUTE","Component","authenticatedRoute","MAIN_ROUTE","RequireAuth","location","useLocation","user","getItem","to","from","RequireHome","Router","element","App","initialState","eMail","rootReducer","combineReducers","action","newTodos","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.617a5c6c.chunk.js","sourcesContent":["export interface User {\r\n    name : string,\r\n    isAuth : boolean,\r\n    eMail : string,\r\n}\r\n\r\nexport enum userTypes {\r\n    AUTHORIZATION_USER = 'AUTHORIZATION_USER',\r\n}\r\nexport interface UserAction {\r\n    type : userTypes.AUTHORIZATION_USER\r\n    payload : string\r\n}","export const firstCheckingValidateStatus = ({touched, errors, values}) => {\r\n    return (!touched ? \"\" : errors? \"error\" :  values ? \"success\" : \"error\")\r\n}\r\nexport const SecondCheckingValidateStatus = () => {\r\n\r\n}","import {userTypes} from \"../interfaces/authUser\";\r\n\r\n\r\nexport const authUser = (userData : string) => ({\r\n    type : userTypes.AUTHORIZATION_USER,\r\n    payload : userData\r\n})\r\n","import {Performer} from \"../../../../interfaces/performer\";\r\nimport {Todo} from \"../../../../interfaces/todo\";\r\nimport {\r\n    ChangePerformerTodoInterface,\r\n    ChangeStateTodoInterface, CreateTodoInterface,\r\n    EditTodoInterface\r\n} from \"../../containers/TodoList.interface\";\r\nimport React from \"react\";\r\n\r\nexport interface TodoCardsInterface {\r\n    createTodo : ({task,taskTitle} : CreateTodoInterface) => Promise<Todo|string>\r\n    deleteTodo : (id : string) => void;\r\n    changePerformerTodo: ({todoId,performerId,performer} :ChangePerformerTodoInterface) => void;\r\n    changeStateTodo : ({todoStatus,todoId}: ChangeStateTodoInterface) => void;\r\n    performers: Performer[];\r\n    todos : Todo[];\r\n    editTodo : ({todo, task, taskTitle} : EditTodoInterface) => Promise<string | boolean>;\r\n}\r\n\r\nexport enum filteringValuesOfTodoState {\r\n    all = 'Все',\r\n    waiting = 'Ожидание',\r\n    atWork = 'В работе',\r\n    done = 'Готово'\r\n\r\n}\r\n\r\nexport type filteringTypesOfTodoState = filteringValuesOfTodoState.all\r\n    | filteringValuesOfTodoState.waiting\r\n    | filteringValuesOfTodoState.atWork\r\n    | filteringValuesOfTodoState.done;","interface UserDataInterface {\r\n    email : string,\r\n    password : string,\r\n}\r\nconst UserData : UserDataInterface = {\r\n    email : \"denis.rybkin.94@mail.ru\",\r\n    password : \"testTEST12345\"\r\n}\r\n\r\n\r\nexport const authenticationUser = ({email, password} : UserDataInterface) : boolean => {\r\n    return email === UserData.email && password === UserData.password;\r\n}","import React from 'react';\r\nimport './WhiteShadowBlock.scss'\r\nimport classNames from \"classnames\";\r\nimport {WhiteShadowBlockInterface} from \"./WhiteShadowBlock.interface\";\r\n\r\nexport const WhiteShadowBlock = ({children,classname} : WhiteShadowBlockInterface) : JSX.Element => (\r\n    <div className={classNames(\"block\", classname)}>\r\n        {children}\r\n    </div>\r\n)\r\n","import React, {useState} from 'react';\r\nimport './Auth.scss';\r\nimport {Checkbox, Form, Input,Button} from \"antd\";\r\nimport {LockOutlined, MailOutlined} from \"@ant-design/icons\";\r\nimport { Layout } from 'antd';\r\nimport {firstCheckingValidateStatus} from \"../../../utils/helpers/checkValidateStatus\";\r\nimport {FormValues, OtherProps} from \"../interfaces\";\r\nimport {FormikProps} from \"formik\";\r\nimport {useAuthActions} from \"../../../hooks/useAuthActions\";\r\nimport {authenticationUser} from \"../../../utils/helpers/authenticationUser\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {WhiteShadowBlock} from \"../../../components/WhiteShadowBlock\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst LoginForm = ({\r\n                       values,\r\n                       touched,\r\n                       errors,\r\n                       isSubmitting,\r\n                       handleChange,\r\n                       handleBlur,\r\n                       isValid,\r\n                   } :OtherProps & FormikProps<FormValues>) => {\r\n    const [formIsDispatched, setFormIsDispatched] = useState<boolean>(false);\r\n    const [loginError, setLoginError] = useState<boolean>(false);\r\n\r\n    let navigate = useNavigate();\r\n\r\n    const {authUser} = useAuthActions();\r\n\r\n\r\n    const onChangeInput = (event : any) => {\r\n        if(loginError){\r\n            setLoginError(false);\r\n        }\r\n        handleChange(event);\r\n\r\n    }\r\n\r\n    const authorization = () => {\r\n        setFormIsDispatched(true);\r\n       if(authenticationUser(values)){\r\n           authUser(values.email);\r\n           navigate('/', { replace: true });\r\n           window.localStorage.isAuth='true';\r\n           setFormIsDispatched(false);\r\n       } else {\r\n           setFormIsDispatched(false);\r\n           setLoginError(true);\r\n       }\r\n    }\r\n\r\n    return (\r\n        <Layout className=\"wrapper\">\r\n            <Content>\r\n                <div className=\"auth__content\">\r\n                    <div className=\"auth__head\">\r\n                        <h2>Войти в аккаунт</h2>\r\n                        <p>Пожалуйста, войдите в аккаунт</p>\r\n                    </div>\r\n                </div>\r\n                <WhiteShadowBlock>\r\n                    <div className=\"auth__form\">\r\n                        <div className=\"auth__form-container\">\r\n                            {loginError && <b className=\"auth__form__error-message\">Неверный логин или пароль!</b>}\r\n                            <Form\r\n                                name=\"normal_login\"\r\n                                className=\"login-form\"\r\n                                initialValues={{\r\n                                    remember: true,\r\n                                }}\r\n                                onFinish={authorization}\r\n                            >\r\n                                <Form.Item\r\n                                    hasFeedback\r\n                                    validateStatus={\r\n                                        loginError ?\r\n                                             \"error\" :\r\n                                            firstCheckingValidateStatus({\r\n                                                touched : touched.email,\r\n                                                errors : errors.email,\r\n                                                values : values.email,\r\n                                            })\r\n                                    }\r\n                                    name=\"email\"\r\n                                    help={!touched.email ? null : errors.email}\r\n                                >\r\n                                    <Input id=\"email\"\r\n                                           size=\"large\"\r\n                                           type=\"email\"\r\n                                           onBlur={handleBlur}\r\n                                           onChange={onChangeInput}\r\n                                           prefix={<MailOutlined className=\"site-form-item-icon\"/>}\r\n                                           placeholder=\"E-mail\"/>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    hasFeedback\r\n                                    validateStatus={\r\n                                        loginError ? \"error\"\r\n                                            :\r\n                                            firstCheckingValidateStatus({\r\n                                                touched : touched.password,\r\n                                                errors : errors.password,\r\n                                                values : values.password,\r\n                                            })\r\n                                    }\r\n                                    name=\"password\"\r\n                                    help={!touched.password ? null : errors.password}\r\n                                >\r\n                                    <Input.Password\r\n                                        id=\"password\"\r\n                                        onBlur={handleBlur}\r\n                                        onChange={onChangeInput}\r\n                                        prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                                        type=\"password\"\r\n                                        placeholder=\"Password\"\r\n                                        size=\"large\"\r\n                                    />\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                                        <Checkbox>Remember me</Checkbox>\r\n                                    </Form.Item>\r\n\r\n                                    <a className=\"login-form-forgot\" href=\"http://localhost:3000/registration\">\r\n                                        Forgot password\r\n                                    </a>\r\n                                </Form.Item>\r\n\r\n                                <Form.Item>\r\n                                    {isSubmitting && !isValid && <span>Ошибка!</span>}\r\n                                    <Button  type=\"primary\"\r\n                                             htmlType=\"submit\"\r\n                                             className=\"login-form-button\"\r\n                                             size=\"large\"\r\n                                             onClick={() => !isValid && setFormIsDispatched(false)}\r\n                                             loading={isValid && formIsDispatched}>\r\n                                        войти в аккаунт\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </div>\r\n                    </div>\r\n                </WhiteShadowBlock>\r\n            </Content>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport  * as AuthAction from '../store/actions/authAction';\r\n\r\nexport const useAuthActions = () => {\r\n    const dispatch = useDispatch();\r\n    return bindActionCreators(AuthAction,dispatch)\r\n}","import LoginForm from '../components/LoginForm';\r\nimport {FormikErrors, withFormik} from 'formik';\r\n// @ts-ignore\r\nimport {validate as validateForm, ValidateProps} from \"../../../utils/validate/validate.ts\";\r\nimport {FormValues, MyFormProps} from \"../interfaces\";\r\n\r\nexport default withFormik<MyFormProps, FormValues>({\r\n\r\n\r\n\r\n    validate: (values :FormValues) => {\r\n        let errors : FormikErrors<FormValues> = {};\r\n\r\n        validateForm(<ValidateProps>{\r\n            isAuth: true,\r\n            values: values,\r\n            errors: errors\r\n        })\r\n\r\n        return errors;\r\n    },\r\n\r\n    handleSubmit: (values, { setSubmitting }) => {\r\n\r\n    },\r\n\r\n    displayName: 'LoginForm', // helps with React DevTools\r\n})(LoginForm);","import {Errors,\r\n    KeysProps,\r\n    RulesInterface,\r\n    ValidateProps,\r\n    Values} from \"./validate.interface\";\r\n\r\n\r\n\r\nexport const validate = ({isAuth,values, errors}: ValidateProps) => {\r\n\r\n    const rules : RulesInterface = {\r\n        email: (errors :Errors, value : string) : void => {\r\n            if (!value) {\r\n                errors.email = 'Введите E-mail!';\r\n            } else if (\r\n                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n            ) {\r\n                errors.email = 'Неверный E-mail!';\r\n            }\r\n        },\r\n        password: (errors :Errors , value : string) : void => {\r\n            if (!value) {\r\n                errors.password = 'Придумайте и введите свой пароль';\r\n            } else if (\r\n                !/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/.test(value)\r\n            ) {\r\n                errors.password = isAuth ? 'Неверный пароль' : 'Слишком легкий пароль!';\r\n            }\r\n        },\r\n\r\n    }\r\n\r\n    Object.keys(values as Values).forEach(\r\n        // @ts-ignore\r\n        (key: KeysProps ) => {\r\n            rules[key] && rules[key](errors, values[key]);\r\n        }\r\n    );\r\n}","import React from 'react';\r\nimport LoginForm from \"../modules/LoginForm/containers/LoginForm\";\r\n\r\nexport const LoginPage : React.FC = () : JSX.Element => {\r\n    return (\r\n        <LoginForm message=\"sign in\" />\r\n    );\r\n};\r\n\r\n","import {Performer} from \"../../../../interfaces/performer\";\r\nimport {Todo} from \"../../../../interfaces/todo\";\r\nimport {EditTodoInterface} from \"../../containers/TodoList.interface\";\r\n\r\nexport interface TodoCardsContentInterface {\r\n    buttonIsSubmitting: boolean;\r\n    setButtonIsSubmitting: (value : boolean) => void\r\n    activeTabKey : tabListTypes;\r\n    performers : Performer[];\r\n    todo : Todo;\r\n    editTodo : ({todo, task, taskTitle} : EditTodoInterface) => Promise<string | boolean>;\r\n}\r\nexport enum tabListKeys  {\r\n    keyTask = 'task',\r\n    keyEdit = 'edit',\r\n}\r\nexport type tabListTypes = tabListKeys.keyTask | tabListKeys.keyEdit","import React, {useState} from 'react';\r\nimport {Select} from \"antd\";\r\nimport {SelectStatusInterface, TodoStateTypes} from \"./SelectStatus.interface\";\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nexport const SelectStatus = ({stateValue,todoId,changeStateTodo} : SelectStatusInterface) : JSX.Element => {\r\n\r\n    const [todoStatus, setTodoStatus] = useState<TodoStateTypes | undefined>(undefined);\r\n\r\n    const handleStatus = async (value: TodoStateTypes) => {\r\n        if (!('Ожидание' === stateValue)) {\r\n            setTodoStatus(value);\r\n        }\r\n        setTodoStatus(value);\r\n        changeStateTodo({todoStatus : stateValue, todoId : todoId});\r\n    }\r\n    return (\r\n        <Select\r\n            value={!todoStatus ? stateValue : todoStatus}\r\n            style={{ width: 120, margin: '0 8px' }}\r\n            onChange={handleStatus}\r\n        >\r\n            {todoStatus === 'Ожидание' &&\r\n                <Option value=\"Ожидание\">Ожидание</Option>\r\n            }\r\n            <Option value=\"В работе\">В работе</Option>\r\n            <Option value=\"Готово\">Готово</Option>\r\n        </Select>\r\n    );\r\n};\r\n\r\n","import React, {useState} from 'react';\r\nimport {Select} from \"antd\";\r\nimport {SelectPerformerInterface} from \"./SelectPerformer.interface\";\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nexport const SelectPerformer = ({performer,performersList,todoId,performerId,changePerformerTodo} : SelectPerformerInterface) : JSX.Element => {\r\n    const defaultValue : string | null  = performer || null;\r\n    // @ts-ignore\r\n\r\n    const [todoPerformer, setTodoPerformer] = useState<string| null>(defaultValue ? defaultValue : null);\r\n\r\n    const handlePerformer = (value: string) => {\r\n        const idOfNewPerformer = performersList?.find(item => item.name === value)!.id;\r\n        setTodoPerformer(value);\r\n        changePerformerTodo({\r\n            performer : value,\r\n            performerId : String(idOfNewPerformer!),\r\n            todoId : String(todoId)\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Select\r\n            value={todoPerformer ? todoPerformer : undefined}\r\n            style={{ width: 170, margin: '0 8px' }}\r\n            onChange={handlePerformer}\r\n        >\r\n            {performersList && performersList.map(item => (\r\n                <Option key={item.id} value={item.name}>{item.name}</Option>\r\n            ))}\r\n        </Select>\r\n    );\r\n};\r\n\r\n","import {ResultStatusType} from \"antd/lib/result\";\r\nimport * as React from \"react\";\r\n\r\ntype ParamTypes = ResultStatusType | React.ReactNode;\r\n\r\ninterface CheckResultStatusInterface {\r\n    resultRequest : null|true|string;\r\n    positiveResult : ParamTypes;\r\n    negativeResult : ParamTypes;\r\n}\r\n\r\nexport const checkResultStatus = ({resultRequest,positiveResult,negativeResult} : CheckResultStatusInterface) : ResultStatusType | ParamTypes => {\r\n    return (resultRequest !== null) ? resultRequest === true ? positiveResult : negativeResult : positiveResult;\r\n}","import React from 'react';\r\nimport {Result} from \"antd\";\r\nimport {ResultRequestInterface} from \"./ResultRequest.interface\";\r\n\r\n\r\n\r\nexport const ResultRequest = ({status,title,subtitle} : ResultRequestInterface) : JSX.Element => {\r\n    return (\r\n        <Result className={'result-icon'}\r\n            status={status}\r\n            title={title}\r\n            subTitle={subtitle ? subtitle : undefined}\r\n        />\r\n    );\r\n};\r\n\r\n","import React, {ReactNode, useState, useEffect} from 'react';\r\nimport {Avatar, Button, Card, Form, Input, Result, Skeleton} from \"antd\";\r\nimport './TodoCardContent.scss'\r\nimport {TodoCardsContentInterface} from \"./TodoCardsContent.interface\";\r\n\r\nimport {checkResultStatus} from \"../../../../utils/helpers/checkResultStatus\";\r\nimport {ResultStatusType} from \"antd/lib/result\";\r\nimport {ResultRequest} from \"../../../../components/ResultRequest\";\r\n\r\nconst {Meta} = Card;\r\n\r\n\r\nexport const TodoCardContent : React.FC<TodoCardsContentInterface> = ({buttonIsSubmitting,setButtonIsSubmitting,activeTabKey,todo,performers,editTodo} : TodoCardsContentInterface) => {\r\n\r\n    const [taskTitle, setTaskTitle] = useState<string>(todo.taskTitle!);\r\n    const [task, setTask] = useState<string>(todo.task!);\r\n    const [resultRequest, setResultRequest] = useState<null|true|string>(null);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [avatarPerformer, setAvatarPerformer] = useState<null | string>(null);\r\n\r\n\r\n    const isDisabled : boolean = (task === todo.task && taskTitle === todo.taskTitle);\r\n\r\n    const onChangeTaskTitle = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        setTaskTitle(event.target.value);\r\n    };\r\n\r\n    const onChangeTask = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        setTask(event.target.value);\r\n    };\r\n\r\n\r\n    const onRemakeTodo = async () => {\r\n        setLoading(true);\r\n        // await editTodo({todo, taskTitle, task})\r\n        //     .then(res => setResultRequest(res === true ? true : String(res)));\r\n        // setButtonIsSubmitting(true);\r\n        // setLoading(false);\r\n    }\r\n\r\n    const onResetTaskValues =  ()  => {\r\n        setTaskTitle(todo.taskTitle!);\r\n        setTask(todo.task!);\r\n        setButtonIsSubmitting(true);\r\n    }\r\n\r\n    const returnAvatar = () => {\r\n        if(!todo.performerId || !todo.performer){\r\n            return null;\r\n        }\r\n        if(performers.length > 0){\r\n            return performers[Number(todo.performerId)-1].avatar\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(returnAvatar());\r\n        return setAvatarPerformer(returnAvatar());\r\n    }, [returnAvatar, todo]);\r\n\r\n\r\n\r\n\r\n    const contentList : {task : ReactNode, edit : ReactNode} = {\r\n        task: <Skeleton loading={false} avatar active>\r\n            <Meta\r\n                avatar={<Avatar src={avatarPerformer}/>}\r\n                title={todo.taskTitle}\r\n                description={todo.task}\r\n            />\r\n        </Skeleton>,\r\n        edit: !buttonIsSubmitting ? <Form\r\n            name=\"basic\"\r\n            labelCol={{ span: 6 }}\r\n            wrapperCol={{ span: 16 }}\r\n            initialValues={{taskTitle : taskTitle, task :task}}\r\n            // onFinish={onFinish}\r\n            // onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n        >\r\n            <Form.Item\r\n                label=\"Заголовок\"\r\n                name=\"taskTitle\"\r\n                rules={[{ required: true, message: 'Пожалуйста введите заголовок !'}]}\r\n            >\r\n                <Input onChange={onChangeTaskTitle} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Задание\"\r\n                name=\"task\"\r\n                rules={[{ required: true, message: 'Пожалуйста введите задание !' }]}\r\n            >\r\n                <Input onChange={onChangeTask} />\r\n            </Form.Item>\r\n            <div className=\"flex-container\">\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Button disabled={isDisabled}\r\n                            danger\r\n                            onClick={onResetTaskValues}>\r\n                        Сброс\r\n                    </Button>\r\n                </Form.Item>\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Button onClick={onRemakeTodo}\r\n                            disabled={isDisabled}\r\n                            type=\"primary\"\r\n                            loading={loading}>\r\n                        Сохранить\r\n                    </Button>\r\n                </Form.Item>\r\n            </div>\r\n        </Form> : <ResultRequest\r\n            // @ts-ignore\r\n            status={checkResultStatus({\r\n                resultRequest,\r\n                positiveResult :\"success\" as ResultStatusType,\r\n                negativeResult : \"error\" as ResultStatusType\r\n            }!)}\r\n            title={(resultRequest !== null) ? resultRequest === true ? \"Успешно\" : \"Ошибка !\" : \"Успешно\"}\r\n            />,\r\n    };\r\n    return (\r\n        <div>\r\n            {contentList[activeTabKey]}\r\n        </div>\r\n    );\r\n};","import {Performer} from \"../../interfaces/performer\";\r\n\r\nexport interface PerformersState {\r\n    performers : Performer[];\r\n    loading: boolean;\r\n    error : null | string;\r\n}\r\n\r\nexport enum PerformersTypes {\r\n    FETCH_PERFORMERS = 'FETCH_PERFORMERS',\r\n    FETCH_PERFORMERS_SUCCESS = 'FETCH_PERFORMERS_SUCCESS',\r\n    FETCH_PERFORMERS_ERROR = 'FETCH_PERFORMERS_ERROR',\r\n}\r\nexport interface FetchPerformersAction {\r\n    type : PerformersTypes.FETCH_PERFORMERS;\r\n}\r\nexport interface FetchPerformersSuccessAction {\r\n    type : PerformersTypes.FETCH_PERFORMERS_SUCCESS;\r\n    payload: Performer[];\r\n}\r\n\r\nexport interface FetchPerformersErrorAction {\r\n    type : PerformersTypes.FETCH_PERFORMERS_ERROR;\r\n    payload: string;\r\n}\r\n\r\nexport type PerformersAction = FetchPerformersAction | FetchPerformersSuccessAction | FetchPerformersErrorAction;","import React, {useState} from 'react';\r\nimport './TodoCard.scss'\r\nimport {Card} from 'antd';\r\nimport {SelectStatus} from \"../SelectStatus\";\r\nimport {TodoCardInterface} from \"./TodoCard.interface\";\r\nimport {SelectPerformer} from \"../SelectPerformer\";\r\nimport {TodoCardContent} from \"../TodoCardContent\";\r\nimport {tabListKeys, tabListTypes} from \"../TodoCardContent/TodoCardsContent.interface\";\r\nimport {ProfileOutlined, EditOutlined, DeleteOutlined} from '@ant-design/icons';\r\n\r\n\r\nconst tabList = [\r\n    {\r\n        key: 'task',\r\n        tab: <p><ProfileOutlined style={{fontSize: \"20px\"}}/> Задача</p>,\r\n    },\r\n    {\r\n        key: 'edit',\r\n        tab: <p><EditOutlined style={{fontSize: \"20px\"}}/> Редактирование</p>,\r\n    },\r\n];\r\n\r\nexport const TodoCard: React.FC<TodoCardInterface> = ({\r\n                                                          performers,\r\n                                                          todo,\r\n                                                          editTodo,\r\n                                                          changeStateTodo,\r\n                                                          changePerformerTodo,\r\n                                                          deleteTodo\r\n                                                      }: TodoCardInterface) => {\r\n\r\n    const [activeTabKey, setActiveTabKey] = useState<tabListTypes>(tabListKeys.keyTask);\r\n    const [buttonIsSubmitting, setButtonIsSubmitting] = useState<boolean>(false);\r\n\r\n    const toggleTab = (key: tabListTypes) => {\r\n        setActiveTabKey(key);\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            style={{width: 400, marginTop: 16}}\r\n            tabList={tabList}\r\n            activeTabKey={activeTabKey}\r\n            onTabChange={key => {\r\n                // @ts-ignore\r\n                toggleTab(key);\r\n                setButtonIsSubmitting(false)\r\n\r\n            }}\r\n            actions={[\r\n                <SelectStatus changeStateTodo={changeStateTodo}\r\n                              todoId={todo.id}\r\n                              stateValue={todo.state}\r\n                />,\r\n                <SelectPerformer changePerformerTodo={changePerformerTodo}\r\n                                 performerId={todo.performerId}\r\n                                 performer={todo.performer}\r\n                                 todoId={todo.id}\r\n                                 performersList={performers}\r\n                />,\r\n                <DeleteOutlined onClick={() => deleteTodo(todo.id)}\r\n                                className=\"delete-icon\"\r\n                                style={{fontSize: \"23px\"}}/>\r\n            ]}\r\n        >\r\n            <TodoCardContent editTodo={editTodo}\r\n                             setButtonIsSubmitting={setButtonIsSubmitting}\r\n                             buttonIsSubmitting={buttonIsSubmitting}\r\n                             activeTabKey={activeTabKey}\r\n                             todo={todo}\r\n                             performers={performers}/>\r\n        </Card>\r\n    );\r\n};","import React, {useState} from 'react';\r\nimport './CreateTodo.scss';\r\nimport {Button, Input, Form, Card} from \"antd\";\r\nimport {CloudUploadOutlined, AppstoreAddOutlined, UploadOutlined} from '@ant-design/icons';\r\nimport {CreateTodoCmpInterface} from \"./CreateTodo.interface\";\r\nimport {ResultRequest} from \"../../../../components/ResultRequest\";\r\n\r\nconst inputStyleConfig = {width: \"90%\"}\r\n\r\nexport const CreateTodo = ({createTodo}:CreateTodoCmpInterface) => {\r\n\r\n    const [showForm, setShowForm] = useState<boolean>(false);\r\n    const [loadingAddTodo, setLoadingAddTodo] = useState<boolean>(false);\r\n    const [resultRequest, setResultRequest] = useState<true|string|null>(null);\r\n\r\n    const closeForm = () => {\r\n        setShowForm(false)\r\n    }\r\n\r\n\r\n    const addTodo = (values : {task : string, taskTitle :string}) => {\r\n        setLoadingAddTodo(true);\r\n        createTodo({\r\n            task : values.task,\r\n            taskTitle : values.taskTitle\r\n        }).then(() =>{\r\n            setResultRequest(true);\r\n            }).catch((error) =>{\r\n            setResultRequest(error);\r\n        }).finally(() => {\r\n            setTimeout(() =>{\r\n                setResultRequest(null);\r\n                closeForm();\r\n                setLoadingAddTodo(false)\r\n                } ,2000);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"center-container\">\r\n            {\r\n                showForm ?\r\n                    resultRequest !== null ?\r\n                        <ResultRequest status={resultRequest === true ? \"success\" : \"error\"}\r\n                                       title={resultRequest === true ? \"Задача создана успешно\" : `${resultRequest}`}/>\r\n                        :\r\n                    <div className=\"form-new-todo\">\r\n                        <Card style={{width: \"70%\"}}\r\n                              title=\"Добавьте задачу\"\r\n                              bordered>\r\n                            <Form\r\n                                name=\"basic\"\r\n                                labelCol={{span: 7}}\r\n                                wrapperCol={{span: 17}}\r\n                                initialValues={{remember: true}}\r\n                                onFinish={addTodo}\r\n                                autoComplete=\"off\"\r\n                            >\r\n                                <Form.Item\r\n                                    label=\"Заголовк\"\r\n                                    name=\"taskTitle\"\r\n                                    rules={[{required: true, message: 'Введите заголовк задачи!'}]}\r\n                                >\r\n                                    <Input size=\"middle\"\r\n                                           placeholder=\"Введите заголовк задачи\"\r\n                                           prefix={<AppstoreAddOutlined style={{opacity: \"0.5\"}}/>}\r\n                                           style={inputStyleConfig}/>\r\n                                </Form.Item>\r\n\r\n                                <Form.Item\r\n                                    label=\"Задача\"\r\n                                    name=\"task\"\r\n                                    rules={[{required: true, message: 'Введите задачу!'}]}\r\n                                >\r\n                                    <Input size=\"middle\"\r\n                                           placeholder=\"Введите задачу\"\r\n                                           prefix={<AppstoreAddOutlined style={{opacity: \"0.5\"}}/>}\r\n                                           style={inputStyleConfig}/>\r\n                                </Form.Item>\r\n\r\n                                <div className=\"form-buttons\">\r\n                                    <Form.Item wrapperCol={{offset: 8, span: 16}}>\r\n                                        <Button type=\"primary\"\r\n                                                icon={<CloudUploadOutlined/>}\r\n                                                size=\"middle\" danger\r\n                                                onClick={closeForm}>\r\n                                            Отмена\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                    <Form.Item wrapperCol={{offset: 8, span: 16}}>\r\n                                        <Button loading={loadingAddTodo}\r\n                                                htmlType=\"submit\"\r\n                                                type=\"primary\"\r\n                                                icon={<CloudUploadOutlined/>}\r\n                                                size=\"middle\">\r\n                                            Добавить задачу\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Form>\r\n                        </Card>\r\n                    </div>\r\n                    :\r\n                    <Button onClick={() => setShowForm(true)}\r\n                            type=\"primary\"\r\n                            shape=\"round\"\r\n                            icon={<UploadOutlined/>}\r\n                            size=\"large\">\r\n                        Добавить задачу\r\n                    </Button>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport './TodoCards.scss';\r\nimport {Input, List, Select} from 'antd';\r\nimport {filteringTypesOfTodoState, filteringValuesOfTodoState, TodoCardsInterface} from \"./TodoCards.interface\";\r\nimport {TodoCard} from \"../TodoCard\";\r\nimport {Todo} from \"../../../../interfaces/todo\";\r\nimport {SearchOutlined} from '@ant-design/icons';\r\nimport {filteringByTask} from \"../../../../utils/helpers/filteringByTask\";\r\nimport {filteringBySate} from \"../../../../utils/helpers/filteringByTodoState\";\r\nimport {CreateTodo} from \"../CreateTodo\";\r\n\r\nconst {Option} = Select;\r\n\r\n\r\nexport const TodoCards: React.FC<TodoCardsInterface> = ({\r\n                                                            performers,\r\n                                                            todos,\r\n                                                            editTodo,\r\n                                                            changeStateTodo,\r\n                                                            changePerformerTodo,\r\n                                                            deleteTodo,\r\n                                                            createTodo\r\n                                                        }: TodoCardsInterface) => {\r\n\r\n    const [searchValue, setSearchValue] = useState<string>(\"\");\r\n    const [todosList, setTodosList] = useState<Todo[]>(todos);\r\n    const [stateFilterValue, setStateFilterValue] = useState<filteringTypesOfTodoState>(filteringValuesOfTodoState.all);\r\n\r\n    const onSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const inputValue = event.target.value;\r\n\r\n        setTodosList(filteringByTask({\r\n            searchValue: inputValue,\r\n            arrTodos: todos\r\n        }));\r\n        setSearchValue(inputValue);\r\n    }\r\n\r\n    const filterByTodoState = (filterParam: filteringTypesOfTodoState) => {\r\n        setTodosList(filteringBySate({\r\n            filterValue: filterParam,\r\n            arrTodos: todos\r\n        }));\r\n        setStateFilterValue(filterParam)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTodosList(todos);\r\n    }, [todos]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"todos-actions\">\r\n                <Input size=\"large\" placeholder=\"Посик по заданиям\"\r\n                       prefix={<SearchOutlined style={{opacity: \"0.5\"}}/>}\r\n                       onChange={onSearch}\r\n                       value={searchValue}\r\n                       style={{width: \"60%\"}}/>\r\n                <Select\r\n                    value={stateFilterValue}\r\n                    style={{width: 120, margin: '0 8px'}}\r\n                    onChange={(e) => filterByTodoState(e)}\r\n                    size=\"large\"\r\n                >\r\n                    <Option key={filteringValuesOfTodoState.all}\r\n                            value=\"Все\">{filteringValuesOfTodoState.all}</Option>\r\n                    <Option key={filteringValuesOfTodoState.waiting}\r\n                            value=\"Ожидание\">{filteringValuesOfTodoState.waiting}</Option>\r\n                    <Option key={filteringValuesOfTodoState.atWork}\r\n                            value=\"В работе\">{filteringValuesOfTodoState.atWork}</Option>\r\n                    <Option key={filteringValuesOfTodoState.done}\r\n                            value=\"Готово\">{filteringValuesOfTodoState.done}</Option>\r\n                </Select>\r\n            </div>\r\n            <div className=\"list-todos\">\r\n                <div className=\"column-container\">\r\n                    <List\r\n                        bordered\r\n                        size=\"small\"\r\n                        dataSource={todosList}\r\n                        renderItem={item => {\r\n                            return (\r\n                                <div className=\"list-item\">\r\n                                    <TodoCard deleteTodo={deleteTodo}\r\n                                              changePerformerTodo={changePerformerTodo}\r\n                                              changeStateTodo={changeStateTodo}\r\n                                              editTodo={editTodo}\r\n                                              todo={item}\r\n                                              performers={performers}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        }}\r\n                    />\r\n                    <CreateTodo createTodo={createTodo}/>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};","import {Todo} from \"../../interfaces/todo\";\r\n\r\ninterface filteringByTaskInterface {\r\n    searchValue : string;\r\n    arrTodos : Todo[]\r\n}\r\n\r\nexport const filteringByTask = ({searchValue,arrTodos} : filteringByTaskInterface) : Todo[] => {\r\n    if(searchValue.length === 0){\r\n        return arrTodos;\r\n    }\r\n    return  arrTodos.filter(todo =>\r\n        todo.task!.toLowerCase().includes(`${searchValue.toLowerCase()}`)\r\n    )\r\n}","import {Todo} from \"../../interfaces/todo\";\r\nimport {\r\n    filteringTypesOfTodoState,\r\n} from \"../../modules/TodoList/components/TodoCards/TodoCards.interface\";\r\n\r\ninterface filteringByTodoStateInterface {\r\n    filterValue : filteringTypesOfTodoState;\r\n    arrTodos : Todo[]\r\n}\r\n\r\nexport const filteringBySate= ({filterValue,arrTodos} : filteringByTodoStateInterface) : Todo[] => {\r\n    if(filterValue === \"Все\"){\r\n        return arrTodos;\r\n    }\r\n    return  arrTodos.filter(todo =>\r\n        todo.state!.toLowerCase().includes(`${filterValue.toLowerCase()}`)\r\n    )\r\n}","import {Todo, TodoStateTypes} from \"../../interfaces/todo\";\r\n\r\nexport interface TodosState {\r\n    todos : Todo[] | [];\r\n    loading : boolean;\r\n    error : null | string;\r\n}\r\n\r\nexport enum TodoActionsType  {\r\n    FETCH_TODOS = \"FETCH_TODOS\",\r\n    FETCH_TODOS_SUCCESS = \"FETCH_TODOS_SUCCESS\",\r\n    FETCH_TODOS_ERROR = \"FETCH_TODOS_ERROR\",\r\n    SET_TODO_STATE = \"SET_TODO_STATE\",\r\n    ASSIGN_TODO_PERFORMER = \"ASSIGN_TODO_PERFORMER\",\r\n    CREATE_TODO = \"CREATE_TODO\",\r\n    SET_TODO_TASK = \"SET_TODO_TASK\",\r\n    DELETE_TODO_TASK = \"DELETE_TODO_TASK\"\r\n}\r\nexport interface FetchTodoAction {\r\n    type: TodoActionsType.FETCH_TODOS\r\n}\r\nexport interface FetchTodoSuccessAction {\r\n    type: TodoActionsType.FETCH_TODOS_SUCCESS;\r\n    payload : Todo[];\r\n}\r\nexport interface FetchTodoErrorAction {\r\n    type: TodoActionsType.FETCH_TODOS_ERROR;\r\n    payload : { error :string };\r\n}\r\nexport interface SetTodoStatAction {\r\n    type: TodoActionsType.SET_TODO_STATE;\r\n    payload : {id: string, state : TodoStateTypes}\r\n}\r\nexport interface AssignTodoPerformerAction {\r\n    type: TodoActionsType.ASSIGN_TODO_PERFORMER;\r\n    payload : {id: string, performer : string,performerId: string}\r\n}\r\nexport interface CreateTodoAction {\r\n    type: TodoActionsType.CREATE_TODO;\r\n    payload : {todo : Todo};\r\n}\r\nexport interface SetTodoTaskAction {\r\n    type: TodoActionsType.SET_TODO_TASK;\r\n    payload : {id: string, task : string, taskTitle : string}\r\n}\r\nexport interface DeleteTodoTaskAction {\r\n    type: TodoActionsType.DELETE_TODO_TASK;\r\n    payload : {id: string}\r\n}\r\nexport type TodosAction =\r\n    FetchTodoAction |\r\n    FetchTodoSuccessAction |\r\n    FetchTodoErrorAction |\r\n    SetTodoStatAction |\r\n    AssignTodoPerformerAction |\r\n    CreateTodoAction |\r\n    SetTodoTaskAction |\r\n    DeleteTodoTaskAction;\r\nexport interface setStateTodoActionParam {\r\n    id: string;\r\n    state : TodoStateTypes;\r\n}\r\nexport interface setPerformerTodoParam {\r\n    id: string;\r\n    performer : string;\r\n    performerId: string;\r\n}\r\nexport interface CreateTodoParam {\r\n    todo : Todo;\r\n}\r\nexport interface SetTodoTaskParam {\r\n    id: string;\r\n    task : string, taskTitle : string;\r\n}\r\nexport interface DeleteTodoTaskParam {\r\n    id: string;\r\n}","import axios from \"axios\";\r\n\r\nexport const API_URL = 'https://619c0b4768ebaa001753c757.mockapi.io';\r\n\r\nexport const $api = axios.create({\r\n    baseURL : API_URL,\r\n})\r\n","import {Performer} from \"../interfaces/performer\";\r\nimport {$api} from \"../http\";\r\n\r\nclass Service {\r\n\r\n    async fetchingPerformers () : Promise<Performer[]> {\r\n        const {data} = await $api.get<Performer[]>('/performers');\r\n        return data;\r\n    }\r\n}\r\n\r\nexport const PerformerService = new Service();","import {PerformersAction, PerformersTypes} from \"../interfaces/performer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {PerformerService} from \"../../services/PerformerService\";\r\n\r\nexport const fetchPerformers = () => {\r\n    return async (dispatch: Dispatch<PerformersAction>) => {\r\n        try {\r\n            dispatch({type : PerformersTypes.FETCH_PERFORMERS});\r\n            const performers = await PerformerService.fetchingPerformers();\r\n            dispatch({type : PerformersTypes.FETCH_PERFORMERS_SUCCESS, payload : performers })\r\n        } catch (error) {\r\n            dispatch({type : PerformersTypes.FETCH_PERFORMERS_ERROR,\r\n                payload: 'Произогла ошибка при загрузки исполнителей' })\r\n        }\r\n    }\r\n}","import {LoginPage} from \"../pages/LoginPage\";\r\nimport {MainPage} from \"../pages/MainPage\";\r\n\r\nexport enum Routs {\r\n    LOGIN_ROUTE = '/login',\r\n    MAIN_ROUTE = '/',\r\n}\r\n\r\nexport const unauthenticatedRout =\r\n    {\r\n        path: Routs.LOGIN_ROUTE,\r\n        Component: LoginPage\r\n    }\r\n\r\nexport const authenticatedRoute = {\r\n        path: Routs.MAIN_ROUTE,\r\n        Component: MainPage\r\n}\r\n","import {Todo} from \"../interfaces/todo\";\r\nimport {NewTodo} from \"../modules/TodoList/containers/TodoList.interface\";\r\nimport {$api} from \"../http\";\r\n\r\nclass Service {\r\n\r\n    async fetchTodos () : Promise<Todo[]>  {\r\n        const {data} = await $api.get<Todo[]>('/todos');\r\n        return data;\r\n    }\r\n    async setTodo (todo: Todo) : Promise<Todo> {\r\n        return new Promise((resolve, reject) =>{\r\n            $api.put<Todo>(`todos/${todo.id}`,todo)\r\n                .then(({data}) => resolve(data))\r\n                .catch((error) => reject(error));\r\n        });\r\n    }\r\n    async deleteTodo (id: string) : Promise<Todo> {\r\n        return new Promise((resolve, reject) =>{\r\n            $api.delete<Todo>(`todos/${id}`)\r\n                .then(({data}) => resolve(data))\r\n                .catch((error) => reject(error));\r\n        });\r\n    }\r\n    async createTodo (todo : NewTodo) : Promise<Todo> {\r\n        return new Promise((resolve, reject) =>{\r\n            $api.post<Todo>(`/todos`,todo)\r\n                .then(({data}) =>(resolve(data)))\r\n                .catch((error) => reject(error));\r\n        });\r\n    }\r\n}\r\n\r\nexport const TodosService = new Service()","import {Dispatch} from \"redux\";\r\nimport {TodoActionsType, TodosAction} from \"../interfaces/todos\";\r\nimport {TodosService} from \"../../services/TodosService\";\r\n\r\nexport const fetchTodos = () => {\r\n    return async (dispatch: Dispatch<TodosAction>) => {\r\n        try {\r\n            dispatch({type : TodoActionsType.FETCH_TODOS});\r\n            const todos = await TodosService.fetchTodos();\r\n            dispatch({type : TodoActionsType.FETCH_TODOS_SUCCESS, payload : todos })\r\n        } catch (error) {\r\n            dispatch({type : TodoActionsType.FETCH_TODOS_ERROR,\r\n                payload: {error : 'Произогла ошибка при загрузки заданий'}})\r\n        }\r\n    }\r\n}","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/reducers\";\r\n\r\nexport const useTypedSelector : TypedUseSelectorHook<RootState> = useSelector","import {\r\n    AssignTodoPerformerAction,\r\n    CreateTodoAction,\r\n    DeleteTodoTaskAction,\r\n    DeleteTodoTaskParam,\r\n    setPerformerTodoParam,\r\n    setStateTodoActionParam,\r\n    SetTodoStatAction,\r\n    SetTodoTaskAction,\r\n    SetTodoTaskParam,\r\n    TodoActionsType\r\n} from \"../interfaces/todos\";\r\nimport {Todo} from \"../../interfaces/todo\";\r\n\r\nexport const setStateTodo = ({id,state}: setStateTodoActionParam) : SetTodoStatAction => ({\r\n    type : TodoActionsType.SET_TODO_STATE,\r\n    payload : {id,state},\r\n})\r\n\r\nexport const setPerformerTodo = ({id,performerId,performer} : setPerformerTodoParam) :AssignTodoPerformerAction => ({\r\n    type : TodoActionsType.ASSIGN_TODO_PERFORMER,\r\n    payload : {id,performer,performerId}\r\n})\r\nexport const CreateTodo = (todo : Todo) : CreateTodoAction => ({\r\n    type : TodoActionsType.CREATE_TODO,\r\n    payload : {todo}\r\n})\r\nexport const SetTodoTask = ({id,task,taskTitle} : SetTodoTaskParam) : SetTodoTaskAction => ({\r\n    type : TodoActionsType.SET_TODO_TASK,\r\n    payload : {id,task,taskTitle}\r\n})\r\nexport const DeleteTodoTask = ({id} : DeleteTodoTaskParam) : DeleteTodoTaskAction => ({\r\n    type : TodoActionsType.DELETE_TODO_TASK,\r\n    payload : {id}\r\n})","import React, {useEffect} from 'react';\r\nimport './TodoList.scss'\r\nimport {TodoCards} from \"../components/TodoCards\";\r\nimport {usePerformerActions} from \"../../../hooks/usePerformerActions\";\r\nimport {useTodosActionsCreators} from \"../../../hooks/useTdosActionsCreators\";\r\nimport {useTypedSelector} from \"../../../hooks/useTypedSelector\";\r\nimport {Layout} from \"antd\";\r\nimport {CheckIsLoading} from \"../../../utils/helpers/checkIsLoading\";\r\nimport {TodosService} from \"../../../services/TodosService\";\r\nimport {\r\n    ChangePerformerTodoInterface,\r\n    EditTodoInterface,\r\n    CreateTodoInterface,\r\n    ChangeStateTodoInterface, NewTodo,\r\n} from \"./TodoList.interface\";\r\nimport {useTodosActions} from \"../../../hooks/useTdosActions\";\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport {Todo} from \"../../../interfaces/todo\";\r\nimport {ResultRequest} from \"../../../components/ResultRequest\";\r\n\r\nconst {Content,Header} = Layout;\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 70 }} spin />;\r\n\r\nexport const TodoList: React.FC = () => {\r\n    const {fetchPerformers} = usePerformerActions();\r\n    const {fetchTodos} = useTodosActionsCreators();\r\n    const {\r\n        SetTodoTask,\r\n        setStateTodo,\r\n        setPerformerTodo,\r\n        DeleteTodoTask,\r\n        CreateTodo\r\n    } = useTodosActions()\r\n\r\n    const {\r\n        performers,\r\n        loading: performersLoading,\r\n        error: performersError\r\n    } = useTypedSelector(state => state.performers);\r\n    const {todos,\r\n        loading: todosLoading,\r\n        error: todosError\r\n    } = useTypedSelector(state => state.todos);\r\n\r\n\r\n    const editTodo = async ({todo, task, taskTitle}: EditTodoInterface): Promise<string | true> => {\r\n        const newTodo = todo;\r\n        let isSuccess = false;\r\n        let reqError = '';\r\n\r\n        newTodo.task = task;\r\n        newTodo.taskTitle = taskTitle;\r\n\r\n        await TodosService.setTodo(newTodo)\r\n            .then((response) => {\r\n                isSuccess = true;\r\n                SetTodoTask({\r\n                    id: response.id,\r\n                    task: response.task!,\r\n                    taskTitle: response.taskTitle!,\r\n                })\r\n            })\r\n            .catch(error => reqError = error)\r\n\r\n        return isSuccess ? isSuccess : reqError;\r\n    }\r\n\r\n    const changeStateTodo = async ({todoId, todoStatus}: ChangeStateTodoInterface) => {\r\n        setStateTodo({state: todoStatus, id: todoId});\r\n        const arrOfOnceTodo = todos.find((item) => item.id === todoId);\r\n        arrOfOnceTodo!.state = todoStatus;\r\n        await TodosService.setTodo(arrOfOnceTodo!);\r\n    }\r\n\r\n    const changePerformerTodo = async ({todoId, performerId, performer}: ChangePerformerTodoInterface) => {\r\n        setPerformerTodo({id: todoId, performerId, performer})\r\n        const todo = todos.find((item) => item.id === todoId);\r\n        todo!.performer = performer;\r\n        todo!.performerId = performerId;\r\n        await TodosService.setTodo(todo!);\r\n    }\r\n\r\n    const createTodo = ({task,taskTitle} : CreateTodoInterface) : Promise<Todo|string> => {\r\n        const newTodo : NewTodo = {\r\n          task,\r\n          taskTitle,\r\n          performerId : \"\",\r\n          performer : \"\",\r\n          state : \"Ожидание\",\r\n      }\r\n        return new Promise<Todo | string>((resolve, reject) => {\r\n            TodosService.createTodo(newTodo).then(\r\n                (res) => {\r\n                    CreateTodo(res);\r\n                    resolve(res)\r\n                })\r\n                .catch((error) => reject(error))})\r\n    }\r\n\r\n    const deleteTodo = async (id: string) => {\r\n        TodosService.deleteTodo(id).then(() => {\r\n            DeleteTodoTask({id});\r\n        });\r\n    }\r\n\r\n    const resultOfLoading = CheckIsLoading({\r\n        firstLoading: performersLoading,\r\n        secondLoading: todosLoading,\r\n        firstError: performersError,\r\n        secondError: todosError,\r\n    })\r\n\r\n    useEffect(() => {\r\n        fetchPerformers();\r\n        fetchTodos();\r\n    }, []);\r\n\r\n    return (\r\n        <Layout>\r\n            <Header style={{backgroundColor : \"#1890ff\",\r\n                color : \"#ffffff\", fontSize : \"19px\"}}>\r\n                Настоящих ToDo List для настоящих ВА-шников\r\n            </Header>\r\n            <Content style={{backgroundColor : \"#f7f8f9\"}}>\r\n                <div>\r\n                    {!(\"error\" in resultOfLoading && resultOfLoading.error\r\n                        || \"errors\" in resultOfLoading && resultOfLoading.errors) ?\r\n                        (\"loading\" in resultOfLoading && resultOfLoading.loading) ?\r\n                            <Spin indicator={antIcon} />\r\n                            :\r\n                            <TodoCards createTodo={createTodo}\r\n                                       deleteTodo={deleteTodo}\r\n                                       changePerformerTodo={changePerformerTodo}\r\n                                       changeStateTodo={changeStateTodo}\r\n                                       editTodo={editTodo}\r\n                                       todos={todos}\r\n                                       performers={performers}/>\r\n                        :\r\n                        <ResultRequest\r\n                            status=\"error\"\r\n                            title=\"Пожалуйста,повторите попытку позже\"\r\n                            subtitle={(\"error\" in resultOfLoading && resultOfLoading.error) ?\r\n                                (resultOfLoading.error)\r\n                                :\r\n                                (`${\"errors\" in resultOfLoading ? resultOfLoading.errors.firstError : null}\r\n                     и ${\"errors\" in resultOfLoading ? resultOfLoading.errors.secondError : null}`)}\r\n                        />\r\n                    }\r\n                </div>\r\n            </Content>\r\n        </Layout>\r\n    );\r\n};","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport  * as PerformerActionCreators from '../store/actionCreates/performersAction';\r\n\r\nexport const usePerformerActions = () => {\r\n    const dispatch = useDispatch();\r\n    return bindActionCreators(PerformerActionCreators,dispatch)\r\n}","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport  * as TodosActionCreators from '../store/actionCreates/todosAction';\r\n\r\nexport const useTodosActionsCreators = () => {\r\n    const dispatch = useDispatch();\r\n    return bindActionCreators(TodosActionCreators,dispatch)\r\n}","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport  * as TodosAction from '../store/actions/todoActions';\r\n\r\nexport const useTodosActions = () => {\r\n    const dispatch = useDispatch();\r\n    return bindActionCreators(TodosAction,dispatch)\r\n}","interface CheckIsLoadingInterface {\r\n    firstLoading: boolean;\r\n    secondLoading: boolean;\r\n    firstError: null | string;\r\n    secondError: null | string;\r\n}\r\n\r\nexport interface ErrorsInterface {\r\n    errors: { firstError: string, secondError: string }\r\n}\r\n\r\nexport interface ErrorInterface {\r\n    error: string;\r\n}\r\n\r\nexport interface LoadingInterface {\r\n    loading : boolean\r\n}\r\n\r\nexport type CheckIsLoadingReturnTypes =\r\n    | ErrorsInterface\r\n    | ErrorInterface\r\n    | LoadingInterface\r\n\r\nexport const CheckIsLoading = ({firstLoading, secondLoading, firstError, secondError}: CheckIsLoadingInterface) : CheckIsLoadingReturnTypes  => {\r\n    if (firstError !== null || secondError !== null) {\r\n        if (firstError !== null && secondError !== null) {\r\n            return {errors: {firstError, secondError}}\r\n        }\r\n        // @ts-ignore\r\n        return  {error : firstError !== null ? firstError : secondError}\r\n    } else if (!firstLoading && !secondLoading) {\r\n        return {loading: false}\r\n    } else {\r\n        return {loading: true}\r\n    }\r\n}","import React from 'react';\r\nimport {TodoList} from \"../modules/TodoList/containers/TodoList\";\r\n\r\nexport const MainPage : React.FC = () : JSX.Element => {\r\n    return (\r\n        <TodoList/>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {useLocation, Navigate} from \"react-router-dom\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\n\r\nexport const RequireAuth : React.FC = ({children } : any) => {\r\n    const location = useLocation();\r\n    const {isAuth} = useTypedSelector(state => state.user)\r\n\r\n    if(!(window.localStorage.getItem('isAuth'))){\r\n        return <Navigate to='/login' state={{from : location}}/>\r\n    }\r\n\r\n    return children;\r\n};\r\n\r\n","import React from 'react';\r\nimport {useLocation, Navigate} from \"react-router-dom\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\n\r\nexport const RequireHome : React.FC = ({children } : any) => {\r\n    const location = useLocation();\r\n    const {isAuth} = useTypedSelector(state => state.user);\r\n\r\n    \r\n    if(window.localStorage.getItem('isAuth')){\r\n        return <Navigate to='/' state={{from : location}}/>\r\n    }\r\n\r\n    return children;\r\n};","import React from 'react';\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport {unauthenticatedRout, authenticatedRoute,} from \"../utils/routs\";\r\nimport {LoginPage} from \"../pages/LoginPage\";\r\nimport {MainPage} from \"../pages/MainPage\";\r\nimport {RequireAuth} from \"../hoc/RequireAuth\";\r\nimport {RequireHome} from \"../hoc/RequireHome\";\r\n\r\n\r\nexport const Router: React.FC = () => {\r\n\r\n    return(\r\n        <>\r\n            <Routes>\r\n                <Route path={authenticatedRoute.path} element={<RequireAuth>\r\n                        <MainPage/>\r\n                    </RequireAuth>}/>\r\n                <Route path={unauthenticatedRout.path} element={<RequireHome>\r\n                        <LoginPage/>\r\n                    </RequireHome>}/>\r\n            </Routes>\r\n        </>\r\n    )\r\n};","import React from 'react';\nimport {Router} from \"./router\";\n\nexport const App: React.FC = () => {\n\n    return (\n            <Router/>\n    )\n}\n","import {PerformersAction, PerformersState, PerformersTypes} from \"../interfaces/performer\";\r\n\r\n\r\nconst initialState : PerformersState = {\r\n    performers : [],\r\n    loading : false,\r\n    error : null,\r\n}\r\n\r\nexport const performersReducer = (state = initialState,action:PerformersAction) : PerformersState => {\r\n    switch (action.type) {\r\n        case PerformersTypes.FETCH_PERFORMERS :\r\n            return {loading : true, error : null, performers: []}\r\n        case PerformersTypes.FETCH_PERFORMERS_SUCCESS :\r\n            return {loading : false, error : null, performers: action.payload}\r\n        case PerformersTypes.FETCH_PERFORMERS_ERROR :\r\n            return {loading : false, error : action.payload, performers: []}\r\n        default :\r\n            return state;\r\n    }\r\n}","import {TodoActionsType, TodosAction, TodosState} from \"../interfaces/todos\";\r\n\r\nconst initialState : TodosState = {\r\n    todos : [],\r\n    loading : false,\r\n    error : null,\r\n}\r\nexport const todosReducer = (state = initialState, action :TodosAction) : TodosState => {\r\n    switch (action.type) {\r\n        case TodoActionsType.FETCH_TODOS:\r\n            return {...state, loading : true, }\r\n        case TodoActionsType.FETCH_TODOS_SUCCESS :\r\n            return {...state, loading: false, todos: action.payload}\r\n        case TodoActionsType.FETCH_TODOS_ERROR :\r\n            return {...state, loading: true, error: action.payload.error}\r\n        case TodoActionsType.CREATE_TODO : {\r\n            return {...state , todos : [...state.todos, action.payload.todo]}\r\n        }\r\n        case TodoActionsType.SET_TODO_STATE : {\r\n            const newTodos = state.todos.map(item => {\r\n                if (item.id === action.payload.id) {\r\n                    item.state = action.payload.state\r\n                }\r\n                return item;\r\n            })\r\n            return {...state, todos: newTodos}\r\n        }\r\n        case TodoActionsType.ASSIGN_TODO_PERFORMER : {\r\n            const newTodos = state.todos.map(item => {\r\n                if(item.id === action.payload.id){\r\n                    item.performer = action.payload.performer;\r\n                    item.performerId = action.payload.performerId\r\n                }\r\n                return item;\r\n            });\r\n            return {...state, todos : newTodos}\r\n        }\r\n        case TodoActionsType.SET_TODO_TASK : {\r\n            const newTodos = state.todos.map(item => {\r\n                if(item.id === action.payload.id){\r\n                    item.task = action.payload.task;\r\n                    item.taskTitle = action.payload.taskTitle;\r\n                }\r\n                return item;\r\n            });\r\n            return {...state, todos : newTodos}\r\n        }\r\n        case  TodoActionsType.DELETE_TODO_TASK :\r\n            return {...state, todos : state.todos.filter(item => item.id !== action.payload.id)}\r\n        default :\r\n            return state\r\n    }\r\n}","import {User} from \"../../interfaces/user\";\r\nimport {UserAction, userTypes} from \"../interfaces/authUser\";\r\n\r\nconst initialState : User = {\r\n    isAuth : false,\r\n    eMail : null\r\n}\r\n\r\nexport const authReducer = (state = initialState, action :UserAction) : User => {\r\n    switch (action.type) {\r\n        case userTypes.AUTHORIZATION_USER:\r\n            return {...state,isAuth : true, eMail: action.payload}\r\n        default :\r\n            return state;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport {performersReducer} from \"./performersReducer\";\r\nimport {todosReducer} from \"./todosReducer\";\r\nimport {authReducer} from \"./authReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    performers : performersReducer,\r\n    todos : todosReducer,\r\n    user : authReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import {applyMiddleware, createStore,compose} from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport {rootReducer} from \"./reducers\";\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css'\nimport {App} from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n          <Provider store={store}>\n              <App />\n          </Provider>\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}